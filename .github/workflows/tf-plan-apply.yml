# # Job is to test basic plan & apply with fixed data and fixed environment 
# # with data getting sent to 179 datastream.  
# name: 'Terraform Plan/Apply: Fixed Environment'

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     types: ['opened', 'reopened', 'synchronize', 'ready_for_review']
#   workflow_dispatch:

# #Special permissions required for OIDC authentication
# permissions:
#   id-token: write
#   contents: read
#   pull-requests: write

# env:
#   ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
#   ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
#   ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
#   ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
#   TF_VAR_observe_customer: "${{ vars.OBSERVE_CUSTOMER}}"
#   TF_VAR_observe_domain: "${{ vars.OBSERVE_DOMAIN }}"
#   TF_VAR_observe_token: "${{ secrets.OBSERVE_TOKEN }}"


# jobs:
#   terraform-plan:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     env:
#       #this is needed since we are running terraform with read-only permissions
#       ARM_SKIP_PROVIDER_REGISTRATION: true
#     outputs:
#       tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#     # Install the latest version of the Terraform CLI
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#         terraform_wrapper: false

#     - name: Create Override providers file for backend   
#       shell: bash 
#       run: |   
#           sudo apt-get install --quiet=2 --assume-yes jo
#           jo -p terraform=$(jo backend=$(jo azurerm={})) > override.tf.json

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       id: init
#       run: |
#         terraform init -no-color \
#           -backend-config="resource_group_name=rg-terraform-github-actions-state" \
#           -backend-config="storage_account_name=terraformazurecollection" \
#           -backend-config="container_name=tfstate" \
#           -backend-config="key=terraform.tfstate" 

#   # Checks that all Terraform configuration files adhere to a canonical format
#     # Will fail the build if not
#     - name: Terraform Format
#       run: terraform fmt -check

#     - name: Terraform Validate
#       id: validate
#       run: terraform validate -no-color

#     # Generates an execution plan for Terraform
#     # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
#     - name: Terraform Plan
#       id: tf-plan
#       run: |
#         export exitcode=0
#         terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

#         echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
#         if [ $exitcode -eq 1 ]; then
#           echo Terraform Plan Failed!
#           exit 1
#         else 
#           exit 0
#         fi

#     # Save plan to artifacts  
#     - name: Publish Terraform Plan
#       uses: actions/upload-artifact@v4
#       with:
#         name: tfplan
#         path: tfplan
            

#     # Create string output of Terraform Plan
#     - name: Create String Output
#       id: tf-plan-string
#       run: |
#         TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
#         delimiter="$(openssl rand -hex 8)"
#         echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
#         echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
#         echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
#         echo "" >> $GITHUB_OUTPUT
#         echo '```terraform' >> $GITHUB_OUTPUT
#         echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
#         echo '```' >> $GITHUB_OUTPUT
#         echo "</details>" >> $GITHUB_OUTPUT
#         echo "${delimiter}" >> $GITHUB_OUTPUT
      
#     # Publish Terraform Plan as task summary
#     - name: Publish Terraform Plan to Task Summary
#       env:
#         SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
#       run: |
#         echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

#     # If this is a PR post the changes
#     - name: Push Terraform Output to PR
#       if: github.ref != 'refs/heads/main'
#       uses: actions/github-script@v7
#       env:
#         SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
#       with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const body = `${process.env.SUMMARY}`;
#             github.rest.issues.createComment({
#                 issue_number: context.issue.number,
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 body: body
#             })
        
#   terraform-apply:
#     name: 'Terraform Apply'
#     if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
#     runs-on: ubuntu-latest
#     needs: [terraform-plan]
    
#     steps:
#     # Checkout the repository to the GitHub Actions runner
#     - name: Checkout
#       uses: actions/checkout@v4

#     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v3

#     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       id: init
#       run: |
#         terraform init -no-color \
#           -backend-config="resource_group_name=rg-terraform-github-actions-state" \
#           -backend-config="storage_account_name=terraformazurecollection" \
#           -backend-config="container_name=tfstate" \
#           -backend-config="key=terraform.tfstate" 

#     # Download saved plan from artifacts  
#     - name: Download Terraform Plan
#       uses: actions/download-artifact@v4
#       with:
#         name: tfplan

#     # Terraform Apply
#     - name: Terraform Apply
#       run: terraform apply -auto-approve tfplan
