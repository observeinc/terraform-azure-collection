name: 'Azure - CI Tests'
#For now this will just create and destroy infrastructure 

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 5 * * *' # runs nightly at 5am

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  issues: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}" # Needed for azure provider service account 
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}" # Needed for azure provider service account 
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}" # Needed for azure provider service account 
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}" # Needed for azure provider service account   
  OBSERVE_CUSTOMER: ${{ vars.OBSERVE_CUSTOMER}} #Needed for observe.tf
  OBSERVE_DOMAIN: ${{ vars.OBSERVE_DOMAIN}} #Needed for observe.tf
  OBSERVE_USER_EMAIL: ${{ secrets.OBSERVE_USER_EMAIL}} #Needed for observe.tf
  OBSERVE_USER_PASSWORD: ${{ secrets.OBSERVE_USER_PASSWORD}} #Needed for observe.tf
  TF_VAR_observe_customer: "${{ vars.OBSERVE_CUSTOMER}}" #Fed to terraform-azure-collection 
  TF_VAR_observe_domain: "${{ vars.OBSERVE_DOMAIN }}" #Fed to terraform-azure-collection 
  TF_VAR_location: "centralus"  #CI Tests resource groups are created in centralus 
  

jobs:
    
  ci-tests-ephemeral:
    name: 'Collection CI Tests'
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: ${{github.workspace}}/.github/terraform
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
     
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
        # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Install Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
         python-version: '3.10' 

    - name: Create Override File
      working-directory: ${{github.workspace}} #Switch so override file is created at root 
      run: |      
       echo "Creating override.tf.json" 
       python ${{github.workspace}}/.github/scripts/create_override_collection.py      
       printenv
      
   
    #Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        echo "Setting additional TF_VAR variables"
        python ${{github.workspace}}/.github/scripts/set_additional_tf_variables.py 
        echo "TF_VAR_branch is ${{ env.TF_VAR_branch }}"
        terraform init -no-color \
          -backend-config="resource_group_name=rg-terraform-github-actions-state" \
          -backend-config="storage_account_name=citeststfazurecollection" \
          -backend-config="container_name=observetfstate" \
          -backend-config="key=${{  env.TF_VAR_branch }}/.tfstate"    


    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Error in Terraform 
      if: steps.tf-plan.outputs.exitcode == 1
      run: exit 1

    # # Terraform Apply if no errors in plan & changes detected 
    # - name: Terraform Apply     
    #   if: steps.tf-plan.outputs.exitcode == 2
    #   run: terraform apply -auto-approve tfplan

      
    # # Terraform Destroy 
    # - name: Terraform Destroy 
    #   run: terraform destroy -auto-approve 


  


