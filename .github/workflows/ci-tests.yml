name: 'Azure - CI Tests'
#For now this will just create and destroy infrastructure 

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 5 * * *' # runs nightly at 5am

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  issues: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TF_VAR_observe_customer: "${{ vars.OBSERVE_CUSTOMER}}"
  TF_VAR_observe_domain: "${{ vars.OBSERVE_DOMAIN }}"
  TF_VAR_observe_token: "${{ secrets.OBSERVE_TOKEN_CI_TESTS }}"
  TF_VAR_location: "centralus"  #CI Tests resource groups are created in centralus 

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        # Extract branch name from GITHUB_REF
        branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

        # Replace "/" with "-" in the branch name
        branch="${branch//\//-}"

        # Append the modified branch name to $GITHUB_OUTPUT
        echo "branch=${branch}" >> "$GITHUB_OUTPUT"

        echo "branch name is $branch"


        #  echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" | tr '/' '-' >> $GITHUB_OUTPUT
        #  echo "branch name is $branch"
        #  branch_remove_special="${branch//[-\/]}" # remove special characters
        #  branch_concat="${branch_remove_special::0:20}" # concatinate to 20 characters
        #  echo "branch_concat=${branch_concat}" >> $GITHUB_OUTPUT


    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false


    - name: Create Override providers file for backend   
      shell: bash 
      run: |   
        echo ${{ steps.extract_branch.outputs.branch }}
        echo ${{ steps.extract_branch.outputs.branch_concat }}
        sudo apt-get install --quiet=2 --assume-yes jo
        
        
        # jo -p terraform=$(jo backend=$(jo azurerm={})) \
        #         resource=$(jo azurerm_resource_group=$(jo observe_resource_group=$(jo name="gha-rg-${{ steps.extract_branch.outputs.branch }}")) \
        #         jo azuread_application=$(jo observe_app_registration=$(jo display_name="gha-app-${{ steps.extract_branch.outputs.branch }}"))) > override.tf.json
        
                
        jo -p terraform=$(jo backend=$(jo azurerm={})) \
                resource=$(jo azurerm_resource_group=$(jo observe_resource_group=$(jo name="rg-${{ steps.extract_branch.outputs.branch }}")) \
                azuread_application=$(jo observe_app_registration=$(jo display_name="app-${{ steps.extract_branch.outputs.branch }}")) \
                azurerm_storage_account=$(jo observe_storage_account=$(jo name="sa-${{ steps.extract_branch.outputs.branch }}"))) > override.tf.json
        printenv | grep GITHUB
   
    #Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        terraform init -no-color \
        -backend-config="resource_group_name=rg-terraform-github-actions-state" \
        -backend-config="storage_account_name=citeststfazurecollection" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=${{ steps.extract_branch.outputs.branch }}/.tfstate" 



    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi

    - name: Error in Terraform 
      if: steps.tf-plan.outputs.exitcode == 1
      run: exit 1

    # Terraform Apply if no errors in plan & changes detected 
    - name: Terraform Apply     
      if: steps.tf-plan.outputs.exitcode == 2
      run: terraform apply -auto-approve tfplan


